SourceCharacter ::
	> any Unicode code point

InputElementDiv ::
	WhiteSpace
	LineTerminator
	Comment
	CommonToken
	DivPunctuator
	RightBracePunctuator

InputElementRegExp ::
	WhiteSpace
	LineTerminator
	Comment
	CommonToken
	RightBracePunctuator
	RegularExpressionLiteral

InputElementRegExpOrTemplateTail ::
	WhiteSpace
	LineTerminator
	Comment
	CommonToken
	RegularExpressionLiteral
	TemplateSubstitutionTail

InputElementTemplateTail ::
	WhiteSpace
	LineTerminator
	Comment
	CommonToken
	DivPunctuator
	TemplateSubstitutionTail

WhiteSpace ::
	<TAB>
	<VT>
	<FF>
	<SP>
	<NBSP>
	<ZWNBSP>
	<USP>

LineTerminator ::
	<LF>
	<CR>
	<LS>
	<PS>

LineTerminatorSequence ::
	<LF>
	<CR> [lookahead != <LF>]
	<LS>
	<PS>
	<CR> <LF>

Comment ::
	MultiLineComment
	SingleLineComment

MultiLineComment ::
	`/*` MultiLineCommentChars? `*/`

MultiLineCommentChars ::
	MultiLineNotAsteriskChar MultiLineCommentChars?
	`*` PostAsteriskCommentChars?

PostAsteriskCommentChars ::
	MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars?
	`*` PostAsteriskCommentChars?

MultiLineNotAsteriskChar ::
	SourceCharacter but not `*`

MultiLineNotForwardSlashOrAsteriskChar ::
	SourceCharacter but not one of `/` or `*`

SingleLineComment ::
	`//` SingleLineCommentChars?

SingleLineCommentChars ::
	SingleLineCommentChar SingleLineCommentChars?

SingleLineCommentChar ::
	SourceCharacter but not LineTerminator

CommonToken ::
	IdentifierName
	Punctuator
	NumericLiteral
	StringLiteral
	Template

IdentifierName ::
	IdentifierStart
	IdentifierName IdentifierPart

IdentifierStart ::
	UnicodeIDStart
	`$`
	`_`
	`\` UnicodeEscapeSequence

IdentifierPart ::
	UnicodeIDContinue
	`$`
	`_`
	`\` UnicodeEscapeSequence
	<ZWNJ>
	<ZWJ>
	
UnicodeIDStart ::
	> any Unicode code point with the Unicode property "ID_Start" or "Other_ID_Start"

UnicodeIDContinue ::
	> any Unicode code point with the Unicode property "ID_Continue" or "Other_ID_Continue", or "Other_ID_Start"

ReservedWord ::
	Keyword
	FutureReservedWord
	NullLiteral
	BooleanLiteral

Keyword :: one of
	`break`		`do`		`in`			`typeof`
	`case`		`else`		`instanceof`	`var`
	`catch`		`export`	`new`			`void`
	`class`		`extends`	`return`		`while`
	`const`		`finally`	`super`			`with`
	`continue`	`for`		`switch`		`yield`
	`debugger`	`function`	`this`
	`default`	`if`		`throw`
	`delete`	`import`	`try`

FutureReservedWord ::
	`enum`
	// `await` is only treated as a /FutureReservedWord/ when /Module/ is the goal symbol of the syntactic grammar.
	`await`
	// The following tokens are also considered to be /FutureReservedWord/s when parsing strict mode code (see 10.2.1).
	`implements`	`package`	`protected`
	`interface`		`private`	`public`

Punctuator :: one of
	`{`		`}`		`(`		`)`		`[`		`]`
	`.`		`;`		`,`		`<`		`>`		`<=`
	`>=`	`==`	`!=`	`===`	`!==`
	`+`		`-`		`*`		`%`		`++`	`--`
	`<<`	`>>`	`>>>`	`&`		`|`		`^`
	`!`		`~`		`&&`	`||`	`?`		` ::`
	`=`		`+=`	`-=`	`*=`	`%=`	`<<=`
	`>>=`	`>>>=`	`&=`	`|=`	`^=`	`=>`

DivPunctuator :: one of
	`/`		`/=`

RightBracePunctuator :: one of
	`)`

NullLiteral ::
	`null`

BooleanLiteral ::
	`true`
	`false`

NumericLiteral ::
	DecimalLiteral
	BinaryIntegerLiteral
	OctalIntegerLiteral
	HexIntegerLiteral

DecimalLiteral ::
	DecimalIntegerLiteral `.` DecimalDigits? ExponentPart?
	`.` DecimalDigits ExponentPart?
	DecimalIntegerLiteral ExponentPart?

DecimalIntegerLiteral ::
	`0`
	NonZeroDigit DecimalDigits?

DecimalDigits ::
	DecimalDigit
	DecimalDigits DecimalDigit

DecimalDigit :: one of
	`0` `1` `2` `3` `4` `5` `6` `7` `8` `9`

NonZeroDigit :: one of
	`1` `2` `3` `4` `5` `6` `7` `8` `9`

ExponetPart ::
	ExponentIndicator SignedInteger

ExponentIndicator :: one of
	`e` `E`

SignedInteger ::
	DecimalDigits
	`+` DecimalDigits
	`-` DecimalDigits

BinaryIntegerLiteral ::
	`0b` BinaryDigits
	`0B` BinaryDigits

BinaryDigits ::
	BinaryDigit
	BinaryDigits BinaryDigit

BinaryDigit :: one of
	`0` `1`

OctalIntegerLiteral ::
	`0o` OctalDigits
	`0O` OctalDigits

OctalDigits ::
	OctalDigit
	OctalDigits OctalDigit

OctalDigit :: one of
	`0` `1` `2` `3` `4` `5` `6` `7`

HexIntegerLiteral ::
	`0x` HexDigits
	`0X` HexDigits

HexDigits ::
	HexDigit
	HexDigits HexDigit

HexDigit :: one of
	`0` `1` `2` `3` `4` `5` `6` `7` `8` `9` `a` `b` `c` `d` `e` `f` `A` `B` `C` `D` `E` `F`

StringLiteral ::
	`"` DoubleStringCharacters? `"`
	`'` SingleStringCharacters? `'`

DoubleStringCharacters ::
	DoubleStringCharacter DoubleStringCharacters?

SingleStringCharacters ::
	SingleStringCharacter SingleStringCharacters?

DoubleStringCharacter ::
	SourceCharacter but not one of `"` or `\` or LineTerminator
	`\` EscapeSequence
	LineContinuation

SingleStringCharacter ::
	SourceCharacter but not one of `'` or `\` or LineTerminator
	`\` EscapeSequence
	LineContinuation

LineContinuation ::
	`\` LineTerminatorSequence

EscapeSequence ::
	CharacterEscapeSequence
	`0` [lookahead <! DecimalDigit]
	HexEscapeSequence
	UnicodeEscapeSequence

CharacterEscapeSequence ::
	SingleEscapeCharacter
	NonEscapeCharacter

SingleEscapeCharacter :: one of
	`'` `"` `\` `b` `f` `n` `r` `t` `v`

NonEscapeCharacter ::
	SourceCharacter but not one of EscapeCharacter or LineTerminator

EscapeCharacter ::
	SingleEscapeCharacter
	DecimalDigit
	`x`
	`u`

HexEscapeSequence ::
	`x` HexDigit HexDigit

UnicodeEscapeSequence ::
	`u` Hex4Digits
	`u{` HexDigits `}`

Hex4Digits ::
	HexDigit HexDigit HexDigit HexDigit

RegularExpressionLiteral ::
	`/` RegularExpressionBody `/` RegularExpressionFlags

RegularExpressionBody ::
	RegularExpressionFirstChar RegularExpressionChars

RegularExpressionChars ::
	[empty]
	RegularExpressionChars RegularExpressionChar

RegularExpressionFirstChar :: 
	RegularExpressionNonTerminator but not one of `*` or `\` or `/` or `[`
	RegularExpressionBackslashSequence
	RegularExpressionClass

RegularExpressionChar :: 
	RegularExpressionNonTerminator but not one of `\` or `/` or `[`
	RegularExpressionBackslashSequence
	RegularExpressionClass

RegularExpressionBackslashSequence :: 
	`\` RegularExpressionNonTerminator

RegularExpressionNonTerminator :: 
	SourceCharacter but not LineTerminator

RegularExpressionClass :: 
	`[` RegularExpressionClassChars `]`

RegularExpressionClassChars :: 
	[empty]
	RegularExpressionClassChars RegularExpressionClassChar

RegularExpressionClassChar :: 
	RegularExpressionNonTerminator but not one of `]` or `\`
	RegularExpressionBackslashSequence

RegularExpressionFlags :: 
	[empty]
	RegularExpressionFlags IdentifierPart

Template :: 
	NoSubstitutionTemplate
	TemplateHead

NoSubstitutionTemplate :: 
	``` TemplateCharacters? ```

TemplateHead :: 
	``` TemplateCharactersopt `${`

TemplateSubstitutionTail :: 
	TemplateMiddle
	TemplateTail

TemplateMiddle :: 
	`}` TemplateCharacters? `${`

TemplateTail :: 
	`}` TemplateCharactersopt ```

TemplateCharacters :: 
	TemplateCharacter TemplateCharacters?

TemplateCharacter :: 
	`$` [lookahead != `{` ]
	`\` EscapeSequence
	LineContinuation
	LineTerminatorSequence
	SourceCharacter but not one of ``` or `\` or `$` or LineTerminator